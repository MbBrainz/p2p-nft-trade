{
    "sourceFile": "src/integration_tests.rs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1654987386995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1654987621603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,71 +1,71 @@\n-#[cfg(test)]\n-mod tests {\n-    use crate::helpers::CwTemplateContract;\n-    use crate::msg::InstantiateMsg;\n-    use cosmwasm_std::{Addr, Coin, Empty, Uint128};\n-    use cw_multi_test::{App, AppBuilder, Contract, ContractWrapper, Executor};\n+// #[cfg(test)]\n+// mod tests {\n+//     use crate::helpers::CwTemplateContract;\n+//     use crate::msg::InstantiateMsg;\n+//     use cosmwasm_std::{Addr, Coin, Empty, Uint128};\n+//     use cw_multi_test::{App, AppBuilder, Contract, ContractWrapper, Executor};\n \n-    pub fn contract_template() -> Box<dyn Contract<Empty>> {\n-        let contract = ContractWrapper::new(\n-            crate::contract::execute,\n-            crate::contract::instantiate,\n-            crate::contract::query,\n-        );\n-        Box::new(contract)\n-    }\n+//     pub fn contract_template() -> Box<dyn Contract<Empty>> {\n+//         let contract = ContractWrapper::new(\n+//             crate::contract::execute,\n+//             crate::contract::instantiate,\n+//             crate::contract::query,\n+//         );\n+//         Box::new(contract)\n+//     }\n \n-    const USER: &str = \"USER\";\n-    const ADMIN: &str = \"ADMIN\";\n-    const NATIVE_DENOM: &str = \"denom\";\n+//     const USER: &str = \"USER\";\n+//     const ADMIN: &str = \"ADMIN\";\n+//     const NATIVE_DENOM: &str = \"denom\";\n \n-    fn mock_app() -> App {\n-        AppBuilder::new().build(|router, _, storage| {\n-            router\n-                .bank\n-                .init_balance(\n-                    storage,\n-                    &Addr::unchecked(USER),\n-                    vec![Coin {\n-                        denom: NATIVE_DENOM.to_string(),\n-                        amount: Uint128::new(1),\n-                    }],\n-                )\n-                .unwrap();\n-        })\n-    }\n+//     fn mock_app() -> App {\n+//         AppBuilder::new().build(|router, _, storage| {\n+//             router\n+//                 .bank\n+//                 .init_balance(\n+//                     storage,\n+//                     &Addr::unchecked(USER),\n+//                     vec![Coin {\n+//                         denom: NATIVE_DENOM.to_string(),\n+//                         amount: Uint128::new(1),\n+//                     }],\n+//                 )\n+//                 .unwrap();\n+//         })\n+//     }\n \n-    fn proper_instantiate() -> (App, CwTemplateContract) {\n-        let mut app = mock_app();\n-        let cw_template_id = app.store_code(contract_template());\n+//     fn proper_instantiate() -> (App, CwTemplateContract) {\n+//         let mut app = mock_app();\n+//         let cw_template_id = app.store_code(contract_template());\n \n-        let msg = InstantiateMsg { count: 1i32 };\n-        let cw_template_contract_addr = app\n-            .instantiate_contract(\n-                cw_template_id,\n-                Addr::unchecked(ADMIN),\n-                &msg,\n-                &[],\n-                \"test\",\n-                None,\n-            )\n-            .unwrap();\n+//         let msg = InstantiateMsg { count: 1i32 };\n+//         let cw_template_contract_addr = app\n+//             .instantiate_contract(\n+//                 cw_template_id,\n+//                 Addr::unchecked(ADMIN),\n+//                 &msg,\n+//                 &[],\n+//                 \"test\",\n+//                 None,\n+//             )\n+//             .unwrap();\n \n-        let cw_template_contract = CwTemplateContract(cw_template_contract_addr);\n+//         let cw_template_contract = CwTemplateContract(cw_template_contract_addr);\n \n-        (app, cw_template_contract)\n-    }\n+//         (app, cw_template_contract)\n+//     }\n \n-    mod count {\n-        use super::*;\n-        use crate::msg::ExecuteMsg;\n+//     mod count {\n+//         use super::*;\n+//         use crate::msg::ExecuteMsg;\n \n-        #[test]\n-        fn count() {\n-            let (mut app, cw_template_contract) = proper_instantiate();\n+//         #[test]\n+//         fn count() {\n+//             let (mut app, cw_template_contract) = proper_instantiate();\n \n-            let msg = ExecuteMsg::Increment {};\n-            let cosmos_msg = cw_template_contract.call(msg).unwrap();\n-            app.execute(Addr::unchecked(USER), cosmos_msg).unwrap();\n-        }\n-    }\n-}\n+//             let msg = ExecuteMsg::Increment {};\n+//             let cosmos_msg = cw_template_contract.call(msg).unwrap();\n+//             app.execute(Addr::unchecked(USER), cosmos_msg).unwrap();\n+//         }\n+//     }\n+// }\n"
                }
            ],
            "date": 1654987386995,
            "name": "Commit-0",
            "content": "#[cfg(test)]\nmod tests {\n    use crate::helpers::CwTemplateContract;\n    use crate::msg::InstantiateMsg;\n    use cosmwasm_std::{Addr, Coin, Empty, Uint128};\n    use cw_multi_test::{App, AppBuilder, Contract, ContractWrapper, Executor};\n\n    pub fn contract_template() -> Box<dyn Contract<Empty>> {\n        let contract = ContractWrapper::new(\n            crate::contract::execute,\n            crate::contract::instantiate,\n            crate::contract::query,\n        );\n        Box::new(contract)\n    }\n\n    const USER: &str = \"USER\";\n    const ADMIN: &str = \"ADMIN\";\n    const NATIVE_DENOM: &str = \"denom\";\n\n    fn mock_app() -> App {\n        AppBuilder::new().build(|router, _, storage| {\n            router\n                .bank\n                .init_balance(\n                    storage,\n                    &Addr::unchecked(USER),\n                    vec![Coin {\n                        denom: NATIVE_DENOM.to_string(),\n                        amount: Uint128::new(1),\n                    }],\n                )\n                .unwrap();\n        })\n    }\n\n    fn proper_instantiate() -> (App, CwTemplateContract) {\n        let mut app = mock_app();\n        let cw_template_id = app.store_code(contract_template());\n\n        let msg = InstantiateMsg { count: 1i32 };\n        let cw_template_contract_addr = app\n            .instantiate_contract(\n                cw_template_id,\n                Addr::unchecked(ADMIN),\n                &msg,\n                &[],\n                \"test\",\n                None,\n            )\n            .unwrap();\n\n        let cw_template_contract = CwTemplateContract(cw_template_contract_addr);\n\n        (app, cw_template_contract)\n    }\n\n    mod count {\n        use super::*;\n        use crate::msg::ExecuteMsg;\n\n        #[test]\n        fn count() {\n            let (mut app, cw_template_contract) = proper_instantiate();\n\n            let msg = ExecuteMsg::Increment {};\n            let cosmos_msg = cw_template_contract.call(msg).unwrap();\n            app.execute(Addr::unchecked(USER), cosmos_msg).unwrap();\n        }\n    }\n}\n"
        }
    ]
}