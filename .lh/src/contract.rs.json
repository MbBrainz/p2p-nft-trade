{
    "sourceFile": "src/contract.rs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1654957649053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1654957677917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,13 @@\n #[cfg(not(feature = \"library\"))]\n use cosmwasm_std::entry_point;\n use cosmwasm_std::{to_binary, Binary, Deps, DepsMut, Env, MessageInfo, Response, StdResult};\n use cw2::set_contract_version;\n+use cw721::{Cw721ExecuteMsg, Cw721ReceiveMsg};\n \n use crate::error::ContractError;\n use crate::msg::{CountResponse, ExecuteMsg, InstantiateMsg, QueryMsg};\n use crate::state::{State, STATE};\n-use cw721::{Cw721ExecuteMsg, Cw721ReceiveMsg};\n \n \n // version info for migration info\n const CONTRACT_NAME: &str = \"crates.io:p2p-nft-trade\";\n"
                },
                {
                    "date": 1654968268141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n \n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use cosmwasm_std::testing::{mock_dependencies_with_balance, mock_env, mock_info};\n+    use cosmwasm_std::testing::{mock_dependencies_with_balances, mock_env, mock_info};\n     use cosmwasm_std::{coins, from_binary};\n \n     #[test]\n     fn proper_initialization() {\n"
                },
                {
                    "date": 1654968273643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,9 +85,9 @@\n     use cosmwasm_std::{coins, from_binary};\n \n     #[test]\n     fn proper_initialization() {\n-        let mut deps = mock_dependencies_with_balance(&coins(2, \"token\"));\n+        let mut deps = mock_dependencies_with_balances(&coins(2, \"token\"));\n \n         let msg = InstantiateMsg { count: 17 };\n         let info = mock_info(\"creator\", &coins(1000, \"earth\"));\n \n"
                },
                {
                    "date": 1654987270082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,14 +80,14 @@\n \n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use cosmwasm_std::testing::{mock_dependencies_with_balances, mock_env, mock_info};\n+    use cosmwasm_std::testing::{mock_dependencies_with_balances, mock_dependencies, mock_env, mock_info};\n     use cosmwasm_std::{coins, from_binary};\n \n     #[test]\n     fn proper_initialization() {\n-        let mut deps = mock_dependencies_with_balances(&coins(2, \"token\"));\n+        let mut deps = mock_dependencies(&coins(2, \"token\"));\n \n         let msg = InstantiateMsg { count: 17 };\n         let info = mock_info(\"creator\", &coins(1000, \"earth\"));\n \n"
                },
                {
                    "date": 1654987283352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,9 @@\n     }\n \n     #[test]\n     fn increment() {\n-        let mut deps = mock_dependencies_with_balance(&coins(2, \"token\"));\n+        let mut deps = mock_dependencies(&coins(2, \"token\"));\n \n         let msg = InstantiateMsg { count: 17 };\n         let info = mock_info(\"creator\", &coins(2, \"token\"));\n         let _res = instantiate(deps.as_mut(), mock_env(), info, msg).unwrap();\n@@ -121,9 +121,9 @@\n     }\n \n     #[test]\n     fn reset() {\n-        let mut deps = mock_dependencies_with_balance(&coins(2, \"token\"));\n+        let mut deps = mock_dependencies(&coins(2, \"token\"));\n \n         let msg = InstantiateMsg { count: 17 };\n         let info = mock_info(\"creator\", &coins(2, \"token\"));\n         let _res = instantiate(deps.as_mut(), mock_env(), info, msg).unwrap();\n"
                },
                {
                    "date": 1654988148304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n \n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use cosmwasm_std::testing::{mock_dependencies_with_balances, mock_dependencies, mock_env, mock_info};\n+    use cosmwasm_std::testing::{mock_dependencies, mock_env, mock_info};\n     use cosmwasm_std::{coins, from_binary};\n \n     #[test]\n     fn proper_initialization() {\n"
                },
                {
                    "date": 1654989342014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,10 @@\n #[cfg(not(feature = \"library\"))]\n use cosmwasm_std::entry_point;\n use cosmwasm_std::{to_binary, Binary, Deps, DepsMut, Env, MessageInfo, Response, StdResult};\n use cw2::set_contract_version;\n-use cw721::{Cw721ExecuteMsg, Cw721ReceiveMsg};\n+use cw721::{Cw721ExecuteMsg, Cw721ReceiveMsg}\n+use sg_std::{Response, StargazeMsgWrapper};\n \n use crate::error::ContractError;\n use crate::msg::{CountResponse, ExecuteMsg, InstantiateMsg, QueryMsg};\n use crate::state::{State, STATE};\n"
                },
                {
                    "date": 1654989506461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,11 @@\n #[cfg(not(feature = \"library\"))]\n use cosmwasm_std::entry_point;\n use cosmwasm_std::{to_binary, Binary, Deps, DepsMut, Env, MessageInfo, Response, StdResult};\n use cw2::set_contract_version;\n-use cw721::{Cw721ExecuteMsg, Cw721ReceiveMsg}\n-use sg_std::{Response, StargazeMsgWrapper};\n+use cw721::{Cw721ExecuteMsg, Cw721ReceiveMsg};\n \n+\n use crate::error::ContractError;\n use crate::msg::{CountResponse, ExecuteMsg, InstantiateMsg, QueryMsg};\n use crate::state::{State, STATE};\n \n@@ -21,10 +21,10 @@\n     info: MessageInfo,\n     msg: InstantiateMsg,\n ) -> Result<Response, ContractError> {\n     let state = State {\n-        count: msg.count,\n         owner: info.sender.clone(),\n+        peer: msg.count,\n     };\n     set_contract_version(deps.storage, CONTRACT_NAME, CONTRACT_VERSION)?;\n     STATE.save(deps.storage, &state)?;\n \n"
                }
            ],
            "date": 1654957649053,
            "name": "Commit-0",
            "content": "#[cfg(not(feature = \"library\"))]\nuse cosmwasm_std::entry_point;\nuse cosmwasm_std::{to_binary, Binary, Deps, DepsMut, Env, MessageInfo, Response, StdResult};\nuse cw2::set_contract_version;\n\nuse crate::error::ContractError;\nuse crate::msg::{CountResponse, ExecuteMsg, InstantiateMsg, QueryMsg};\nuse crate::state::{State, STATE};\nuse cw721::{Cw721ExecuteMsg, Cw721ReceiveMsg};\n\n\n// version info for migration info\nconst CONTRACT_NAME: &str = \"crates.io:p2p-nft-trade\";\nconst CONTRACT_VERSION: &str = env!(\"CARGO_PKG_VERSION\");\n\n#[cfg_attr(not(feature = \"library\"), entry_point)]\npub fn instantiate(\n    deps: DepsMut,\n    _env: Env,\n    info: MessageInfo,\n    msg: InstantiateMsg,\n) -> Result<Response, ContractError> {\n    let state = State {\n        count: msg.count,\n        owner: info.sender.clone(),\n    };\n    set_contract_version(deps.storage, CONTRACT_NAME, CONTRACT_VERSION)?;\n    STATE.save(deps.storage, &state)?;\n\n    Ok(Response::new()\n        .add_attribute(\"method\", \"instantiate\")\n        .add_attribute(\"owner\", info.sender)\n        .add_attribute(\"count\", msg.count.to_string()))\n}\n\n#[cfg_attr(not(feature = \"library\"), entry_point)]\npub fn execute(\n    deps: DepsMut,\n    _env: Env,\n    info: MessageInfo,\n    msg: ExecuteMsg,\n) -> Result<Response, ContractError> {\n    match msg {\n        ExecuteMsg::Increment {} => try_increment(deps),\n        ExecuteMsg::Reset { count } => try_reset(deps, info, count),\n    }\n}\n\npub fn try_increment(deps: DepsMut) -> Result<Response, ContractError> {\n    STATE.update(deps.storage, |mut state| -> Result<_, ContractError> {\n        state.count += 1;\n        Ok(state)\n    })?;\n\n    Ok(Response::new().add_attribute(\"method\", \"try_increment\"))\n}\n\npub fn try_reset(deps: DepsMut, info: MessageInfo, count: i32) -> Result<Response, ContractError> {\n    STATE.update(deps.storage, |mut state| -> Result<_, ContractError> {\n        if info.sender != state.owner {\n            return Err(ContractError::Unauthorized {});\n        }\n        state.count = count;\n        Ok(state)\n    })?;\n    Ok(Response::new().add_attribute(\"method\", \"reset\"))\n}\n\n#[cfg_attr(not(feature = \"library\"), entry_point)]\npub fn query(deps: Deps, _env: Env, msg: QueryMsg) -> StdResult<Binary> {\n    match msg {\n        QueryMsg::GetCount {} => to_binary(&query_count(deps)?),\n    }\n}\n\nfn query_count(deps: Deps) -> StdResult<CountResponse> {\n    let state = STATE.load(deps.storage)?;\n    Ok(CountResponse { count: state.count })\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n    use cosmwasm_std::testing::{mock_dependencies_with_balance, mock_env, mock_info};\n    use cosmwasm_std::{coins, from_binary};\n\n    #[test]\n    fn proper_initialization() {\n        let mut deps = mock_dependencies_with_balance(&coins(2, \"token\"));\n\n        let msg = InstantiateMsg { count: 17 };\n        let info = mock_info(\"creator\", &coins(1000, \"earth\"));\n\n        // we can just call .unwrap() to assert this was a success\n        let res = instantiate(deps.as_mut(), mock_env(), info, msg).unwrap();\n        assert_eq!(0, res.messages.len());\n\n        // it worked, let's query the state\n        let res = query(deps.as_ref(), mock_env(), QueryMsg::GetCount {}).unwrap();\n        let value: CountResponse = from_binary(&res).unwrap();\n        assert_eq!(17, value.count);\n    }\n\n    #[test]\n    fn increment() {\n        let mut deps = mock_dependencies_with_balance(&coins(2, \"token\"));\n\n        let msg = InstantiateMsg { count: 17 };\n        let info = mock_info(\"creator\", &coins(2, \"token\"));\n        let _res = instantiate(deps.as_mut(), mock_env(), info, msg).unwrap();\n\n        // beneficiary can release it\n        let info = mock_info(\"anyone\", &coins(2, \"token\"));\n        let msg = ExecuteMsg::Increment {};\n        let _res = execute(deps.as_mut(), mock_env(), info, msg).unwrap();\n\n        // should increase counter by 1\n        let res = query(deps.as_ref(), mock_env(), QueryMsg::GetCount {}).unwrap();\n        let value: CountResponse = from_binary(&res).unwrap();\n        assert_eq!(18, value.count);\n    }\n\n    #[test]\n    fn reset() {\n        let mut deps = mock_dependencies_with_balance(&coins(2, \"token\"));\n\n        let msg = InstantiateMsg { count: 17 };\n        let info = mock_info(\"creator\", &coins(2, \"token\"));\n        let _res = instantiate(deps.as_mut(), mock_env(), info, msg).unwrap();\n\n        // beneficiary can release it\n        let unauth_info = mock_info(\"anyone\", &coins(2, \"token\"));\n        let msg = ExecuteMsg::Reset { count: 5 };\n        let res = execute(deps.as_mut(), mock_env(), unauth_info, msg);\n        match res {\n            Err(ContractError::Unauthorized {}) => {}\n            _ => panic!(\"Must return unauthorized error\"),\n        }\n\n        // only the original creator can reset the counter\n        let auth_info = mock_info(\"creator\", &coins(2, \"token\"));\n        let msg = ExecuteMsg::Reset { count: 5 };\n        let _res = execute(deps.as_mut(), mock_env(), auth_info, msg).unwrap();\n\n        // should now be 5\n        let res = query(deps.as_ref(), mock_env(), QueryMsg::GetCount {}).unwrap();\n        let value: CountResponse = from_binary(&res).unwrap();\n        assert_eq!(5, value.count);\n    }\n}\n"
        }
    ]
}